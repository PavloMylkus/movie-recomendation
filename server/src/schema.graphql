type Query {
  movies(filter: MoviesFilterInput): Movies
  moviesByIds(ids: [Int]): [Movie]
  genres: [Genre]
}

input MoviesFilterInput {
	page: Int,
	sortBy: String,
	sortDirection: SORT_DIRECTION,
	includeAdult: Boolean,
	year: Int,
	primaryReleaseYear: Int,
	genre: Int
}

enum SORT_DIRECTION{
	desc,
	asc
}

type Movies {
	page: Int!
	totalResults: Int!
	totalPages: Int!
	results:[Movie]!
}

type Movie{
	id: ID!
	title: String!
	releaseDate( format: String): String!
	posterPath: String
	genres: [Genre]
	adult: Boolean
	overview: String
	backdropPath: String
	voteCount: Int
	voteAverage: Float
	originalTitle: String
	originalLanguage:String
	video: Boolean
	popularity: Float
}

type Genre{
	id: Int!
	name: String
}